#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Base.DataBase
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Lex")]
	public partial class RightsLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRight(Right instance);
    partial void UpdateRight(Right instance);
    partial void DeleteRight(Right instance);
    partial void InsertModule(Module instance);
    partial void UpdateModule(Module instance);
    partial void DeleteModule(Module instance);
    partial void InsertModuleEntity(ModuleEntity instance);
    partial void UpdateModuleEntity(ModuleEntity instance);
    partial void DeleteModuleEntity(ModuleEntity instance);
    partial void InsertEntityType(EntityType instance);
    partial void UpdateEntityType(EntityType instance);
    partial void DeleteEntityType(EntityType instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserEntityRight(UserEntityRight instance);
    partial void UpdateUserEntityRight(UserEntityRight instance);
    partial void DeleteUserEntityRight(UserEntityRight instance);
    partial void InsertEntity(Entity instance);
    partial void UpdateEntity(Entity instance);
    partial void DeleteEntity(Entity instance);
    partial void InsertFirme_Persoane_Contact(Firme_Persoane_Contact instance);
    partial void UpdateFirme_Persoane_Contact(Firme_Persoane_Contact instance);
    partial void DeleteFirme_Persoane_Contact(Firme_Persoane_Contact instance);
    partial void InsertFiliale(Filiale instance);
    partial void UpdateFiliale(Filiale instance);
    partial void DeleteFiliale(Filiale instance);
    partial void InsertApplicationParameter(ApplicationParameter instance);
    partial void UpdateApplicationParameter(ApplicationParameter instance);
    partial void DeleteApplicationParameter(ApplicationParameter instance);
    #endregion
		
		//public RightsLinqDataContext() : 
		//		base(global::Base.Properties.Settings.Default.LexConnectionString, mappingSource)
		//{
		//	OnCreated();
		//}
		
		public RightsLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		//public RightsLinqDataContext(System.Data.IDbConnection connection) : 
		//		base(connection, mappingSource)
		//{
		//	OnCreated();
		//}
		
		//public RightsLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
		//		base(connection, mappingSource)
		//{
		//	OnCreated();
		//}
		
		//public RightsLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
		//		base(connection, mappingSource)
		//{
		//	OnCreated();
		//}
		
		public System.Data.Linq.Table<Right> Rights
		{
			get
			{
				return this.GetTable<Right>();
			}
		}
		
		public System.Data.Linq.Table<Module> Modules
		{
			get
			{
				return this.GetTable<Module>();
			}
		}
		
		public System.Data.Linq.Table<ModuleEntity> ModuleEntities
		{
			get
			{
				return this.GetTable<ModuleEntity>();
			}
		}
		
		public System.Data.Linq.Table<EntityType> EntityTypes
		{
			get
			{
				return this.GetTable<EntityType>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserEntityRight> UserEntityRights
		{
			get
			{
				return this.GetTable<UserEntityRight>();
			}
		}
		
		public System.Data.Linq.Table<Entity> Entities
		{
			get
			{
				return this.GetTable<Entity>();
			}
		}
		
		public System.Data.Linq.Table<Firme_Persoane_Contact> Firme_Persoane_Contacts
		{
			get
			{
				return this.GetTable<Firme_Persoane_Contact>();
			}
		}
		
		public System.Data.Linq.Table<Filiale> Filiales
		{
			get
			{
				return this.GetTable<Filiale>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationParameter> ApplicationParameters
		{
			get
			{
				return this.GetTable<ApplicationParameter>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rights")]
	public partial class Right : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RightId;
		
		private string _RightName;
		
		private string _RightPattern;
		
		private bool _IsSpecialRight;
		
		private EntitySet<UserEntityRight> _UserEntityRights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRightIdChanging(int value);
    partial void OnRightIdChanged();
    partial void OnRightNameChanging(string value);
    partial void OnRightNameChanged();
    partial void OnRightPatternChanging(string value);
    partial void OnRightPatternChanged();
    partial void OnIsSpecialRightChanging(bool value);
    partial void OnIsSpecialRightChanged();
    #endregion
		
		public Right()
		{
			this._UserEntityRights = new EntitySet<UserEntityRight>(new Action<UserEntityRight>(this.attach_UserEntityRights), new Action<UserEntityRight>(this.detach_UserEntityRights));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RightId
		{
			get
			{
				return this._RightId;
			}
			set
			{
				if ((this._RightId != value))
				{
					this.OnRightIdChanging(value);
					this.SendPropertyChanging();
					this._RightId = value;
					this.SendPropertyChanged("RightId");
					this.OnRightIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RightName
		{
			get
			{
				return this._RightName;
			}
			set
			{
				if ((this._RightName != value))
				{
					this.OnRightNameChanging(value);
					this.SendPropertyChanging();
					this._RightName = value;
					this.SendPropertyChanged("RightName");
					this.OnRightNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightPattern", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RightPattern
		{
			get
			{
				return this._RightPattern;
			}
			set
			{
				if ((this._RightPattern != value))
				{
					this.OnRightPatternChanging(value);
					this.SendPropertyChanging();
					this._RightPattern = value;
					this.SendPropertyChanged("RightPattern");
					this.OnRightPatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSpecialRight", DbType="Bit NOT NULL")]
		public bool IsSpecialRight
		{
			get
			{
				return this._IsSpecialRight;
			}
			set
			{
				if ((this._IsSpecialRight != value))
				{
					this.OnIsSpecialRightChanging(value);
					this.SendPropertyChanging();
					this._IsSpecialRight = value;
					this.SendPropertyChanged("IsSpecialRight");
					this.OnIsSpecialRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Right_UserEntityRight", Storage="_UserEntityRights", ThisKey="RightId", OtherKey="RightId")]
		public EntitySet<UserEntityRight> UserEntityRights
		{
			get
			{
				return this._UserEntityRights;
			}
			set
			{
				this._UserEntityRights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserEntityRights(UserEntityRight entity)
		{
			this.SendPropertyChanging();
			entity.Right = this;
		}
		
		private void detach_UserEntityRights(UserEntityRight entity)
		{
			this.SendPropertyChanging();
			entity.Right = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Modules")]
	public partial class Module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ModuleId;
		
		private string _ModuleName;
		
		private EntitySet<ModuleEntity> _ModuleEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModuleIdChanging(int value);
    partial void OnModuleIdChanged();
    partial void OnModuleNameChanging(string value);
    partial void OnModuleNameChanged();
    #endregion
		
		public Module()
		{
			this._ModuleEntities = new EntitySet<ModuleEntity>(new Action<ModuleEntity>(this.attach_ModuleEntities), new Action<ModuleEntity>(this.detach_ModuleEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string ModuleName
		{
			get
			{
				return this._ModuleName;
			}
			set
			{
				if ((this._ModuleName != value))
				{
					this.OnModuleNameChanging(value);
					this.SendPropertyChanging();
					this._ModuleName = value;
					this.SendPropertyChanged("ModuleName");
					this.OnModuleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_ModuleEntity", Storage="_ModuleEntities", ThisKey="ModuleId", OtherKey="ModuleId")]
		public EntitySet<ModuleEntity> ModuleEntities
		{
			get
			{
				return this._ModuleEntities;
			}
			set
			{
				this._ModuleEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModuleEntities(ModuleEntity entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_ModuleEntities(ModuleEntity entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModuleEntities")]
	public partial class ModuleEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ModuleEntityId;
		
		private int _ModuleId;
		
		private int _EntityId;
		
		private EntityRef<Module> _Module;
		
		private EntityRef<Entity> _Entity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModuleEntityIdChanging(int value);
    partial void OnModuleEntityIdChanged();
    partial void OnModuleIdChanging(int value);
    partial void OnModuleIdChanged();
    partial void OnEntityIdChanging(int value);
    partial void OnEntityIdChanged();
    #endregion
		
		public ModuleEntity()
		{
			this._Module = default(EntityRef<Module>);
			this._Entity = default(EntityRef<Entity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleEntityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ModuleEntityId
		{
			get
			{
				return this._ModuleEntityId;
			}
			set
			{
				if ((this._ModuleEntityId != value))
				{
					this.OnModuleEntityIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleEntityId = value;
					this.SendPropertyChanged("ModuleEntityId");
					this.OnModuleEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleId", DbType="Int NOT NULL")]
		public int ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="Int NOT NULL")]
		public int EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_ModuleEntity", Storage="_Module", ThisKey="ModuleId", OtherKey="ModuleId", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.ModuleEntities.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.ModuleEntities.Add(this);
						this._ModuleId = value.ModuleId;
					}
					else
					{
						this._ModuleId = default(int);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_ModuleEntity", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.ModuleEntities.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.ModuleEntities.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(int);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityTypes")]
	public partial class EntityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntityTypeId;
		
		private string _EntityTypeName;
		
		private EntitySet<Entity> _Entities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityTypeIdChanging(int value);
    partial void OnEntityTypeIdChanged();
    partial void OnEntityTypeNameChanging(string value);
    partial void OnEntityTypeNameChanged();
    #endregion
		
		public EntityType()
		{
			this._Entities = new EntitySet<Entity>(new Action<Entity>(this.attach_Entities), new Action<Entity>(this.detach_Entities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntityTypeId
		{
			get
			{
				return this._EntityTypeId;
			}
			set
			{
				if ((this._EntityTypeId != value))
				{
					this.OnEntityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EntityTypeId = value;
					this.SendPropertyChanged("EntityTypeId");
					this.OnEntityTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EntityTypeName
		{
			get
			{
				return this._EntityTypeName;
			}
			set
			{
				if ((this._EntityTypeName != value))
				{
					this.OnEntityTypeNameChanging(value);
					this.SendPropertyChanging();
					this._EntityTypeName = value;
					this.SendPropertyChanged("EntityTypeName");
					this.OnEntityTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityType_Entity", Storage="_Entities", ThisKey="EntityTypeId", OtherKey="EntityTypeId")]
		public EntitySet<Entity> Entities
		{
			get
			{
				return this._Entities;
			}
			set
			{
				this._Entities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.EntityType = this;
		}
		
		private void detach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.EntityType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Group_ID;
		
		private string _GroupName;
		
		private EntitySet<User> _Users;
		
		private EntitySet<UserEntityRight> _UserEntityRights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroup_IDChanging(int value);
    partial void OnGroup_IDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public Group()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._UserEntityRights = new EntitySet<UserEntityRight>(new Action<UserEntityRight>(this.attach_UserEntityRights), new Action<UserEntityRight>(this.detach_UserEntityRights));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Group_ID
		{
			get
			{
				return this._Group_ID;
			}
			set
			{
				if ((this._Group_ID != value))
				{
					this.OnGroup_IDChanging(value);
					this.SendPropertyChanging();
					this._Group_ID = value;
					this.SendPropertyChanged("Group_ID");
					this.OnGroup_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_User", Storage="_Users", ThisKey="Group_ID", OtherKey="Group_ID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserEntityRight", Storage="_UserEntityRights", ThisKey="Group_ID", OtherKey="GroupId")]
		public EntitySet<UserEntityRight> UserEntityRights
		{
			get
			{
				return this._UserEntityRights;
			}
			set
			{
				this._UserEntityRights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_UserEntityRights(UserEntityRight entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UserEntityRights(UserEntityRight entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_ID;
		
		private string _Username;
		
		private System.Nullable<int> _PersoaneContact_ID;
		
		private bool _Activ;
		
		private System.Nullable<int> _Group_ID;
		
		private System.Nullable<int> _Filiala_ID;
		
		private System.Data.Linq.Binary _Password;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Firme_Persoane_Contact> _Firme_Persoane_Contact;
		
		private EntityRef<Filiale> _Filiale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPersoaneContact_IDChanging(System.Nullable<int> value);
    partial void OnPersoaneContact_IDChanged();
    partial void OnActivChanging(bool value);
    partial void OnActivChanged();
    partial void OnGroup_IDChanging(System.Nullable<int> value);
    partial void OnGroup_IDChanged();
    partial void OnFiliala_IDChanging(System.Nullable<int> value);
    partial void OnFiliala_IDChanged();
    partial void OnPasswordChanging(System.Data.Linq.Binary value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._Group = default(EntityRef<Group>);
			this._Firme_Persoane_Contact = default(EntityRef<Firme_Persoane_Contact>);
			this._Filiale = default(EntityRef<Filiale>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersoaneContact_ID", DbType="Int")]
		public System.Nullable<int> PersoaneContact_ID
		{
			get
			{
				return this._PersoaneContact_ID;
			}
			set
			{
				if ((this._PersoaneContact_ID != value))
				{
					if (this._Firme_Persoane_Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersoaneContact_IDChanging(value);
					this.SendPropertyChanging();
					this._PersoaneContact_ID = value;
					this.SendPropertyChanged("PersoaneContact_ID");
					this.OnPersoaneContact_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activ", DbType="Bit NOT NULL")]
		public bool Activ
		{
			get
			{
				return this._Activ;
			}
			set
			{
				if ((this._Activ != value))
				{
					this.OnActivChanging(value);
					this.SendPropertyChanging();
					this._Activ = value;
					this.SendPropertyChanged("Activ");
					this.OnActivChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_ID", DbType="Int")]
		public System.Nullable<int> Group_ID
		{
			get
			{
				return this._Group_ID;
			}
			set
			{
				if ((this._Group_ID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroup_IDChanging(value);
					this.SendPropertyChanging();
					this._Group_ID = value;
					this.SendPropertyChanged("Group_ID");
					this.OnGroup_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filiala_ID", DbType="Int")]
		public System.Nullable<int> Filiala_ID
		{
			get
			{
				return this._Filiala_ID;
			}
			set
			{
				if ((this._Filiala_ID != value))
				{
					if (this._Filiale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFiliala_IDChanging(value);
					this.SendPropertyChanging();
					this._Filiala_ID = value;
					this.SendPropertyChanged("Filiala_ID");
					this.OnFiliala_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_User", Storage="_Group", ThisKey="Group_ID", OtherKey="Group_ID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Group_ID = value.Group_ID;
					}
					else
					{
						this._Group_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Firme_Persoane_Contact_User", Storage="_Firme_Persoane_Contact", ThisKey="PersoaneContact_ID", OtherKey="PersoaneContact_ID", IsForeignKey=true)]
		public Firme_Persoane_Contact Firme_Persoane_Contact
		{
			get
			{
				return this._Firme_Persoane_Contact.Entity;
			}
			set
			{
				Firme_Persoane_Contact previousValue = this._Firme_Persoane_Contact.Entity;
				if (((previousValue != value) 
							|| (this._Firme_Persoane_Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Firme_Persoane_Contact.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Firme_Persoane_Contact.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._PersoaneContact_ID = value.PersoaneContact_ID;
					}
					else
					{
						this._PersoaneContact_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Firme_Persoane_Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Filiale_User", Storage="_Filiale", ThisKey="Filiala_ID", OtherKey="Filiala_ID", IsForeignKey=true)]
		public Filiale Filiale
		{
			get
			{
				return this._Filiale.Entity;
			}
			set
			{
				Filiale previousValue = this._Filiale.Entity;
				if (((previousValue != value) 
							|| (this._Filiale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Filiale.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Filiale.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Filiala_ID = value.Filiala_ID;
					}
					else
					{
						this._Filiala_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Filiale");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserEntityRights")]
	public partial class UserEntityRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserEntityRightId;
		
		private int _GroupId;
		
		private int _RightId;
		
		private int _EntityId;
		
		private System.Data.Linq.Binary _Row_ID;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Right> _Right;
		
		private EntityRef<Entity> _Entity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserEntityRightIdChanging(int value);
    partial void OnUserEntityRightIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnRightIdChanging(int value);
    partial void OnRightIdChanged();
    partial void OnEntityIdChanging(int value);
    partial void OnEntityIdChanged();
    partial void OnRow_IDChanging(System.Data.Linq.Binary value);
    partial void OnRow_IDChanged();
    #endregion
		
		public UserEntityRight()
		{
			this._Group = default(EntityRef<Group>);
			this._Right = default(EntityRef<Right>);
			this._Entity = default(EntityRef<Entity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEntityRightId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int UserEntityRightId
		{
			get
			{
				return this._UserEntityRightId;
			}
			set
			{
				if ((this._UserEntityRightId != value))
				{
					this.OnUserEntityRightIdChanging(value);
					this.SendPropertyChanging();
					this._UserEntityRightId = value;
					this.SendPropertyChanged("UserEntityRightId");
					this.OnUserEntityRightIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RightId
		{
			get
			{
				return this._RightId;
			}
			set
			{
				if ((this._RightId != value))
				{
					if (this._Right.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRightIdChanging(value);
					this.SendPropertyChanging();
					this._RightId = value;
					this.SendPropertyChanged("RightId");
					this.OnRightIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Row_ID", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Row_ID
		{
			get
			{
				return this._Row_ID;
			}
			set
			{
				if ((this._Row_ID != value))
				{
					this.OnRow_IDChanging(value);
					this.SendPropertyChanging();
					this._Row_ID = value;
					this.SendPropertyChanged("Row_ID");
					this.OnRow_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserEntityRight", Storage="_Group", ThisKey="GroupId", OtherKey="Group_ID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UserEntityRights.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UserEntityRights.Add(this);
						this._GroupId = value.Group_ID;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Right_UserEntityRight", Storage="_Right", ThisKey="RightId", OtherKey="RightId", IsForeignKey=true)]
		public Right Right
		{
			get
			{
				return this._Right.Entity;
			}
			set
			{
				Right previousValue = this._Right.Entity;
				if (((previousValue != value) 
							|| (this._Right.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Right.Entity = null;
						previousValue.UserEntityRights.Remove(this);
					}
					this._Right.Entity = value;
					if ((value != null))
					{
						value.UserEntityRights.Add(this);
						this._RightId = value.RightId;
					}
					else
					{
						this._RightId = default(int);
					}
					this.SendPropertyChanged("Right");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_UserEntityRight", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.UserEntityRights.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.UserEntityRights.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(int);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Entities")]
	public partial class Entity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntityId;
		
		private string _EntityName;
		
		private string _Description;
		
		private int _EntityTypeId;
		
		private EntitySet<ModuleEntity> _ModuleEntities;
		
		private EntitySet<UserEntityRight> _UserEntityRights;
		
		private EntityRef<EntityType> _EntityType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityIdChanging(int value);
    partial void OnEntityIdChanged();
    partial void OnEntityNameChanging(string value);
    partial void OnEntityNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEntityTypeIdChanging(int value);
    partial void OnEntityTypeIdChanged();
    #endregion
		
		public Entity()
		{
			this._ModuleEntities = new EntitySet<ModuleEntity>(new Action<ModuleEntity>(this.attach_ModuleEntities), new Action<ModuleEntity>(this.detach_ModuleEntities));
			this._UserEntityRights = new EntitySet<UserEntityRight>(new Action<UserEntityRight>(this.attach_UserEntityRights), new Action<UserEntityRight>(this.detach_UserEntityRights));
			this._EntityType = default(EntityRef<EntityType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string EntityName
		{
			get
			{
				return this._EntityName;
			}
			set
			{
				if ((this._EntityName != value))
				{
					this.OnEntityNameChanging(value);
					this.SendPropertyChanging();
					this._EntityName = value;
					this.SendPropertyChanged("EntityName");
					this.OnEntityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTypeId", DbType="Int NOT NULL")]
		public int EntityTypeId
		{
			get
			{
				return this._EntityTypeId;
			}
			set
			{
				if ((this._EntityTypeId != value))
				{
					if (this._EntityType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EntityTypeId = value;
					this.SendPropertyChanged("EntityTypeId");
					this.OnEntityTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_ModuleEntity", Storage="_ModuleEntities", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<ModuleEntity> ModuleEntities
		{
			get
			{
				return this._ModuleEntities;
			}
			set
			{
				this._ModuleEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_UserEntityRight", Storage="_UserEntityRights", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<UserEntityRight> UserEntityRights
		{
			get
			{
				return this._UserEntityRights;
			}
			set
			{
				this._UserEntityRights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityType_Entity", Storage="_EntityType", ThisKey="EntityTypeId", OtherKey="EntityTypeId", IsForeignKey=true)]
		public EntityType EntityType
		{
			get
			{
				return this._EntityType.Entity;
			}
			set
			{
				EntityType previousValue = this._EntityType.Entity;
				if (((previousValue != value) 
							|| (this._EntityType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityType.Entity = null;
						previousValue.Entities.Remove(this);
					}
					this._EntityType.Entity = value;
					if ((value != null))
					{
						value.Entities.Add(this);
						this._EntityTypeId = value.EntityTypeId;
					}
					else
					{
						this._EntityTypeId = default(int);
					}
					this.SendPropertyChanged("EntityType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModuleEntities(ModuleEntity entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_ModuleEntities(ModuleEntity entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_UserEntityRights(UserEntityRight entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_UserEntityRights(UserEntityRight entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Firme_Persoane_Contact")]
	public partial class Firme_Persoane_Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersoaneContact_ID;
		
		private System.Nullable<int> _FirmaPC_ID;
		
		private System.Nullable<int> _FunctiePC_ID;
		
		private string _NumePC;
		
		private System.Nullable<int> _SexPC;
		
		private string _TelefonPC;
		
		private System.Nullable<bool> _AnulareTerti;
		
		private System.Nullable<int> _Filiala_ID;
		
		private string _EmailPC;
		
		private string _InitialePC;
		
		private System.Data.Linq.Binary _Row_ID;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersoaneContact_IDChanging(int value);
    partial void OnPersoaneContact_IDChanged();
    partial void OnFirmaPC_IDChanging(System.Nullable<int> value);
    partial void OnFirmaPC_IDChanged();
    partial void OnFunctiePC_IDChanging(System.Nullable<int> value);
    partial void OnFunctiePC_IDChanged();
    partial void OnNumePCChanging(string value);
    partial void OnNumePCChanged();
    partial void OnSexPCChanging(System.Nullable<int> value);
    partial void OnSexPCChanged();
    partial void OnTelefonPCChanging(string value);
    partial void OnTelefonPCChanged();
    partial void OnAnulareTertiChanging(System.Nullable<bool> value);
    partial void OnAnulareTertiChanged();
    partial void OnFiliala_IDChanging(System.Nullable<int> value);
    partial void OnFiliala_IDChanged();
    partial void OnEmailPCChanging(string value);
    partial void OnEmailPCChanged();
    partial void OnInitialePCChanging(string value);
    partial void OnInitialePCChanged();
    partial void OnRow_IDChanging(System.Data.Linq.Binary value);
    partial void OnRow_IDChanged();
    #endregion
		
		public Firme_Persoane_Contact()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersoaneContact_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PersoaneContact_ID
		{
			get
			{
				return this._PersoaneContact_ID;
			}
			set
			{
				if ((this._PersoaneContact_ID != value))
				{
					this.OnPersoaneContact_IDChanging(value);
					this.SendPropertyChanging();
					this._PersoaneContact_ID = value;
					this.SendPropertyChanged("PersoaneContact_ID");
					this.OnPersoaneContact_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirmaPC_ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FirmaPC_ID
		{
			get
			{
				return this._FirmaPC_ID;
			}
			set
			{
				if ((this._FirmaPC_ID != value))
				{
					this.OnFirmaPC_IDChanging(value);
					this.SendPropertyChanging();
					this._FirmaPC_ID = value;
					this.SendPropertyChanged("FirmaPC_ID");
					this.OnFirmaPC_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctiePC_ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FunctiePC_ID
		{
			get
			{
				return this._FunctiePC_ID;
			}
			set
			{
				if ((this._FunctiePC_ID != value))
				{
					this.OnFunctiePC_IDChanging(value);
					this.SendPropertyChanging();
					this._FunctiePC_ID = value;
					this.SendPropertyChanged("FunctiePC_ID");
					this.OnFunctiePC_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumePC", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string NumePC
		{
			get
			{
				return this._NumePC;
			}
			set
			{
				if ((this._NumePC != value))
				{
					this.OnNumePCChanging(value);
					this.SendPropertyChanging();
					this._NumePC = value;
					this.SendPropertyChanged("NumePC");
					this.OnNumePCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SexPC", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SexPC
		{
			get
			{
				return this._SexPC;
			}
			set
			{
				if ((this._SexPC != value))
				{
					this.OnSexPCChanging(value);
					this.SendPropertyChanging();
					this._SexPC = value;
					this.SendPropertyChanged("SexPC");
					this.OnSexPCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelefonPC", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string TelefonPC
		{
			get
			{
				return this._TelefonPC;
			}
			set
			{
				if ((this._TelefonPC != value))
				{
					this.OnTelefonPCChanging(value);
					this.SendPropertyChanging();
					this._TelefonPC = value;
					this.SendPropertyChanged("TelefonPC");
					this.OnTelefonPCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnulareTerti", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> AnulareTerti
		{
			get
			{
				return this._AnulareTerti;
			}
			set
			{
				if ((this._AnulareTerti != value))
				{
					this.OnAnulareTertiChanging(value);
					this.SendPropertyChanging();
					this._AnulareTerti = value;
					this.SendPropertyChanged("AnulareTerti");
					this.OnAnulareTertiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filiala_ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Filiala_ID
		{
			get
			{
				return this._Filiala_ID;
			}
			set
			{
				if ((this._Filiala_ID != value))
				{
					this.OnFiliala_IDChanging(value);
					this.SendPropertyChanging();
					this._Filiala_ID = value;
					this.SendPropertyChanged("Filiala_ID");
					this.OnFiliala_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailPC", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string EmailPC
		{
			get
			{
				return this._EmailPC;
			}
			set
			{
				if ((this._EmailPC != value))
				{
					this.OnEmailPCChanging(value);
					this.SendPropertyChanging();
					this._EmailPC = value;
					this.SendPropertyChanged("EmailPC");
					this.OnEmailPCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialePC", DbType="VarChar(3)", UpdateCheck=UpdateCheck.Never)]
		public string InitialePC
		{
			get
			{
				return this._InitialePC;
			}
			set
			{
				if ((this._InitialePC != value))
				{
					this.OnInitialePCChanging(value);
					this.SendPropertyChanging();
					this._InitialePC = value;
					this.SendPropertyChanged("InitialePC");
					this.OnInitialePCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Row_ID", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Row_ID
		{
			get
			{
				return this._Row_ID;
			}
			set
			{
				if ((this._Row_ID != value))
				{
					this.OnRow_IDChanging(value);
					this.SendPropertyChanging();
					this._Row_ID = value;
					this.SendPropertyChanged("Row_ID");
					this.OnRow_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Firme_Persoane_Contact_User", Storage="_Users", ThisKey="PersoaneContact_ID", OtherKey="PersoaneContact_ID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Firme_Persoane_Contact = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Firme_Persoane_Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Filiale")]
	public partial class Filiale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Filiala_ID;
		
		private string _Filiala;
		
		private System.Nullable<int> _Oras_ID;
		
		private string _Prescurtare;
		
		private string _Adresa;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFiliala_IDChanging(int value);
    partial void OnFiliala_IDChanged();
    partial void OnFilialaChanging(string value);
    partial void OnFilialaChanged();
    partial void OnOras_IDChanging(System.Nullable<int> value);
    partial void OnOras_IDChanged();
    partial void OnPrescurtareChanging(string value);
    partial void OnPrescurtareChanged();
    partial void OnAdresaChanging(string value);
    partial void OnAdresaChanged();
    #endregion
		
		public Filiale()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filiala_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Filiala_ID
		{
			get
			{
				return this._Filiala_ID;
			}
			set
			{
				if ((this._Filiala_ID != value))
				{
					this.OnFiliala_IDChanging(value);
					this.SendPropertyChanging();
					this._Filiala_ID = value;
					this.SendPropertyChanged("Filiala_ID");
					this.OnFiliala_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filiala", DbType="VarChar(50)")]
		public string Filiala
		{
			get
			{
				return this._Filiala;
			}
			set
			{
				if ((this._Filiala != value))
				{
					this.OnFilialaChanging(value);
					this.SendPropertyChanging();
					this._Filiala = value;
					this.SendPropertyChanged("Filiala");
					this.OnFilialaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Oras_ID", DbType="Int")]
		public System.Nullable<int> Oras_ID
		{
			get
			{
				return this._Oras_ID;
			}
			set
			{
				if ((this._Oras_ID != value))
				{
					this.OnOras_IDChanging(value);
					this.SendPropertyChanging();
					this._Oras_ID = value;
					this.SendPropertyChanged("Oras_ID");
					this.OnOras_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prescurtare", DbType="VarChar(10)")]
		public string Prescurtare
		{
			get
			{
				return this._Prescurtare;
			}
			set
			{
				if ((this._Prescurtare != value))
				{
					this.OnPrescurtareChanging(value);
					this.SendPropertyChanging();
					this._Prescurtare = value;
					this.SendPropertyChanged("Prescurtare");
					this.OnPrescurtareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adresa", DbType="NVarChar(255)")]
		public string Adresa
		{
			get
			{
				return this._Adresa;
			}
			set
			{
				if ((this._Adresa != value))
				{
					this.OnAdresaChanging(value);
					this.SendPropertyChanging();
					this._Adresa = value;
					this.SendPropertyChanged("Adresa");
					this.OnAdresaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Filiale_User", Storage="_Users", ThisKey="Filiala_ID", OtherKey="Filiala_ID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Filiale = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Filiale = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationParameters")]
	public partial class ApplicationParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationParameterId;
		
		private string _ParameterName;
		
		private string _ParameterCode;
		
		private string _ParameterFormat;
		
		private string _ParameterValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationParameterIdChanging(int value);
    partial void OnApplicationParameterIdChanged();
    partial void OnParameterNameChanging(string value);
    partial void OnParameterNameChanged();
    partial void OnParameterCodeChanging(string value);
    partial void OnParameterCodeChanged();
    partial void OnParameterFormatChanging(string value);
    partial void OnParameterFormatChanged();
    partial void OnParameterValueChanging(string value);
    partial void OnParameterValueChanged();
    #endregion
		
		public ApplicationParameter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationParameterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ApplicationParameterId
		{
			get
			{
				return this._ApplicationParameterId;
			}
			set
			{
				if ((this._ApplicationParameterId != value))
				{
					this.OnApplicationParameterIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationParameterId = value;
					this.SendPropertyChanged("ApplicationParameterId");
					this.OnApplicationParameterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ParameterName
		{
			get
			{
				return this._ParameterName;
			}
			set
			{
				if ((this._ParameterName != value))
				{
					this.OnParameterNameChanging(value);
					this.SendPropertyChanging();
					this._ParameterName = value;
					this.SendPropertyChanged("ParameterName");
					this.OnParameterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ParameterCode
		{
			get
			{
				return this._ParameterCode;
			}
			set
			{
				if ((this._ParameterCode != value))
				{
					this.OnParameterCodeChanging(value);
					this.SendPropertyChanging();
					this._ParameterCode = value;
					this.SendPropertyChanged("ParameterCode");
					this.OnParameterCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterFormat", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ParameterFormat
		{
			get
			{
				return this._ParameterFormat;
			}
			set
			{
				if ((this._ParameterFormat != value))
				{
					this.OnParameterFormatChanging(value);
					this.SendPropertyChanging();
					this._ParameterFormat = value;
					this.SendPropertyChanged("ParameterFormat");
					this.OnParameterFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterValue", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string ParameterValue
		{
			get
			{
				return this._ParameterValue;
			}
			set
			{
				if ((this._ParameterValue != value))
				{
					this.OnParameterValueChanging(value);
					this.SendPropertyChanging();
					this._ParameterValue = value;
					this.SendPropertyChanged("ParameterValue");
					this.OnParameterValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
